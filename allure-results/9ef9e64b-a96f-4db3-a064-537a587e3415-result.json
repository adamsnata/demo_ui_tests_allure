{"name": "Clearing a cart", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('xpath', '//a[@class=\"s-button s-button_theme-red\"]')).is visible\n\nReason: NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class=\"s-button s-button_theme-red\"]\"}\n  (Session info: chrome=112.0.5615.139)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00FCDCE3+50899]\n\t(No symbol) [0x00F5E111]\n\t(No symbol) [0x00E65588]\n\t(No symbol) [0x00E908F9]\n\t(No symbol) [0x00E90AFB]\n\t(No symbol) [0x00EBF902]\n\t(No symbol) [0x00EAB944]\n\t(No symbol) [0x00EBE01C]\n\t(No symbol) [0x00EAB6F6]\n\t(No symbol) [0x00E87708]\n\t(No symbol) [0x00E8886D]\n\tGetHandleVerifier [0x01233EAE+2566302]\n\tGetHandleVerifier [0x012692B1+2784417]\n\tGetHandleVerifier [0x0126327C+2759788]\n\tGetHandleVerifier [0x01065740+672048]\n\t(No symbol) [0x00F68872]\n\t(No symbol) [0x00F641C8]\n\t(No symbol) [0x00F642AB]\n\t(No symbol) [0x00F571B7]\n\tBaseThreadInitThunk [0x76137D49+25]\n\tRtlInitializeExceptionChain [0x7753B74B+107]\n\tRtlClearBits [0x7753B6CF+191]\n\nScreenshot: file://C:\\Users\\natal\\.selene\\screenshots\\1683526734015\\1683526734016.png\nPageSource: file://C:\\Users\\natal\\.selene\\screenshots\\1683526734015\\1683526734016.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x000001754CC9CD00>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.ElementCondition object at 0x000001754CC9CD00>\nentity = <selene.core.entity.Element object at 0x000001754DC898D0>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\condition.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x000001754DC898D0>\n\n    def fn(entity: E) -> None:\n>       if not predicate(entity):\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\condition.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000001754DC898D0>\n\n>       'is visible', lambda element: element().is_displayed()\n    )\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\match.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x000001754DC898D0>\n\n    def __call__(self) -> WebElement:\n>       return self.locate()\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\entity.py:196: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x000001754DC898D0>\n\n    def locate(self) -> WebElement:\n>       return self._locator()\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\entity.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x000001754C76FE50>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n        self.config,\n    )\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\entity.py:1132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4690dc0c8f9e34665ca3bcef05e34233\")>\nby = 'xpath', value = '//a[@class=\"s-button s-button_theme-red\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:855: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4690dc0c8f9e34665ca3bcef05e34233\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': '//a[@class=\"s-button s-button_theme-red\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001754D569EA0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x76137D49+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7753B74B+107]\\\\n\\\\tRtlClearBits [0x7753B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class=\"s-button s-button_theme-red\"]\"}\nE         (Session info: chrome=112.0.5615.139)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00FCDCE3+50899]\nE       \t(No symbol) [0x00F5E111]\nE       \t(No symbol) [0x00E65588]\nE       \t(No symbol) [0x00E908F9]\nE       \t(No symbol) [0x00E90AFB]\nE       \t(No symbol) [0x00EBF902]\nE       \t(No symbol) [0x00EAB944]\nE       \t(No symbol) [0x00EBE01C]\nE       \t(No symbol) [0x00EAB6F6]\nE       \t(No symbol) [0x00E87708]\nE       \t(No symbol) [0x00E8886D]\nE       \tGetHandleVerifier [0x01233EAE+2566302]\nE       \tGetHandleVerifier [0x012692B1+2784417]\nE       \tGetHandleVerifier [0x0126327C+2759788]\nE       \tGetHandleVerifier [0x01065740+672048]\nE       \t(No symbol) [0x00F68872]\nE       \t(No symbol) [0x00F641C8]\nE       \t(No symbol) [0x00F642AB]\nE       \t(No symbol) [0x00F571B7]\nE       \tBaseThreadInitThunk [0x76137D49+25]\nE       \tRtlInitializeExceptionChain [0x7753B74B+107]\nE       \tRtlClearBits [0x7753B6CF+191]\n\nC:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\ncls = <class 'tests.test_cart.TestClearCart'>\n\n    @classmethod\n    def setup_class(cls):\n        app.base.open_main_page()\n    \n        with allure.step('ADd item to card'):\n            app.header_menu.choose_section(\"Каталог\")\n    \n            app.catalog.choose_products_in_stock()\n            app.catalog.choose_random_product()\n    \n            app.product.select_size()\n    \n            app.product.add_to_cart()\n    \n>           app.rightside_cart.submit_checkout()\n\ntest_cart.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\components\\staya_dog\\cart_rightside_menu.py:10: in submit_checkout\n    browser.element(by.xpath(cart_rightside_locators.cart_checkout_button)).should(be.visible).click()\nC:\\Python310\\lib\\site-packages\\selene\\core\\entity.py:136: in should\n    self.wait.for_(condition)\nC:\\Python310\\lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.ElementCondition object at 0x000001754CC9CD00>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('xpath', '//a[@class=\"s-button s-button_theme-red\"]')).is visible\nE                   \nE                   Reason: NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class=\"s-button s-button_theme-red\"]\"}\nE                     (Session info: chrome=112.0.5615.139)\nE                   Stacktrace:\nE                   Backtrace:\nE                   \tGetHandleVerifier [0x00FCDCE3+50899]\nE                   \t(No symbol) [0x00F5E111]\nE                   \t(No symbol) [0x00E65588]\nE                   \t(No symbol) [0x00E908F9]\nE                   \t(No symbol) [0x00E90AFB]\nE                   \t(No symbol) [0x00EBF902]\nE                   \t(No symbol) [0x00EAB944]\nE                   \t(No symbol) [0x00EBE01C]\nE                   \t(No symbol) [0x00EAB6F6]\nE                   \t(No symbol) [0x00E87708]\nE                   \t(No symbol) [0x00E8886D]\nE                   \tGetHandleVerifier [0x01233EAE+2566302]\nE                   \tGetHandleVerifier [0x012692B1+2784417]\nE                   \tGetHandleVerifier [0x0126327C+2759788]\nE                   \tGetHandleVerifier [0x01065740+672048]\nE                   \t(No symbol) [0x00F68872]\nE                   \t(No symbol) [0x00F641C8]\nE                   \t(No symbol) [0x00F642AB]\nE                   \t(No symbol) [0x00F571B7]\nE                   \tBaseThreadInitThunk [0x76137D49+25]\nE                   \tRtlInitializeExceptionChain [0x7753B74B+107]\nE                   \tRtlClearBits [0x7753B6CF+191]\nE                   \nE                   Screenshot: file://C:\\Users\\natal\\.selene\\screenshots\\1683526734015\\1683526734016.png\nE                   PageSource: file://C:\\Users\\natal\\.selene\\screenshots\\1683526734015\\1683526734016.html\n\nC:\\Python310\\lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "start": 1683526754611, "stop": 1683526754611, "uuid": "4196efa0-24f3-49fa-80b6-d0903568f547", "historyId": "5e6d14ea3fb9e85e8673f98643248739", "testCaseId": "d1429df11c3dc0b59968ed317ba54b25", "fullName": "tests.test_cart.TestClearCart#test_clear_cart", "labels": [{"name": "suite", "value": "Cart"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Web"}, {"name": "subSuite", "value": "TestClearCart"}, {"name": "host", "value": "LAPTOP-LLCB38HA"}, {"name": "thread", "value": "32012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_cart"}]}